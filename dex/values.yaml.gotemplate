{{- $hosts := default "" .ingress.hosts | split | compact -}}
{{- $component := .hub.componentName -}}
replicaCount: 1

image:
  repository: "{{.dex.image.repo}}"
  tag: "{{.dex.image.tag}}"

nameOverride: "{{$component}}"
fullnameOverride: "{{$component}}"

grpc:
  enabled: true

configSecret:
  create: true

envFrom:
  - configMapRef:
      name: dex-custom-env-vars
      optional: true

config:
  issuer: "{{.dex.issuer}}"

  storage:
    type: kubernetes
    config:
      inCluster: true

  web:
    http: 0.0.0.0:5556

  grpc:
    addr: 0.0.0.0:5557

  oauth2:
    skipApprovalScreen: true

{{- if or (or .dex.connectors.ldap.host .dex.connectors.okta.issuer) (and .dex.connectors.microsoft.clientID .dex.connectors.microsoft.clientSecret)}}
  connectors:
{{- if and .dex.connectors.microsoft.clientID .dex.connectors.microsoft.clientSecret}}
    - type: microsoft
      id: microsoft
      name: Microsoft
      config:
        clientID: "{{.dex.connectors.microsoft.clientID}}"
        clientSecret: "{{.dex.connectors.microsoft.clientSecret}}"
        redirectURI: "{{.dex.connectors.microsoft.redirectURI}}"
        tenant: "{{.dex.connectors.microsoft.tenant}}"
        {{- if .dex.connectors.microsoft.groups}}
        groups:
        {{- range .dex.connectors.microsoft.groups}}
        - "{{.}}"
        {{- end}}
        {{- end}}
        {{- if .dex.connectors.microsoft.scopes}}
        scopes:
        {{- range .dex.connectors.microsoft.scopes}}
        - "{{.}}"
        {{- end}}
        {{- end}}
        emailToLowercase: {{.dex.connectors.microsoft.emailToLowercase}}
{{- end}}
{{- if .dex.connectors.ldap.host}}
    - type: ldap
      id: ldap
      name: LDAP
      config:
        host: '{{.dex.connectors.ldap.host}}'
        insecureNoSSL: true
        usernamePrompt: '{{.dex.connectors.ldap.usernamePrompt}}'
        bindDN: '{{.dex.connectors.ldap.dn}}'
{{- if .dex.connectors.ldap.password}}
        bindPW: '{{.dex.connectors.ldap.password}}'
{{- end}}
{{- if .dex.connectors.ldap.search.dn}}
        userSearch:
          baseDN: '{{.dex.connectors.ldap.search.dn}}'
          filter: '{{.dex.connectors.ldap.search.filter}}'
          username: '{{.dex.connectors.ldap.search.usernameAttr}}'
          idAttr: '{{.dex.connectors.ldap.search.idAttr}}'
          emailAttr: 'mail'
          nameAttr: '{{.dex.connectors.ldap.search.usernameAttr}}'
{{- end}}
{{- if .dex.connectors.ldap.groupSearch.dn}}
      groupSearch:
        baseDN: '{{.dex.connectors.ldap.groupSearch.dn}}'
        filter: '(objectClass=group)'
{{- end}}
{{- end}}
{{- if .dex.connectors.okta.issuer}}
    - type: oidc
      id: okta
      name: Okta
      config:
        issuer: "{{.dex.connectors.okta.issuer}}"
        clientID: "{{.dex.connectors.okta.clientId}}"
        clientSecret: "{{.dex.connectors.okta.clientSecret}}"
        redirectURI: "{{.dex.issuer}}/callback"
        userInfoURI: "{{.dex.connectors.okta.issuer}}/oauth2/v1/userinfo"
        GetUserInfo: true
        insecureSkipEmailVerified: true
{{end}}
{{else}}

  connectors: []
{{- end}}

{{- if and .dex.passwordDb.email .dex.passwordDb.password}}
  enablePasswordDB: true
  staticPasswords:
    - email: '{{.dex.passwordDb.email}}'
      username: '{{.dex.passwordDb.email}}'
      hash: '{{.dex.passwordDb.password | bcrypt}}'
      userID: '{{.dex.passwordDb.email | b64enc}}'
{{- else}}
  enablePasswordDB: false
{{- end}}

envVars:
  - name: KUBERNETES_POD_NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 65534

ingress:
  enabled: {{not (empty $hosts)}}
{{- if not (empty $hosts)}}
  className: "{{.ingress.class}}"
{{- if eq .ingress.protocol "https"}}
  annotations:
    kubernetes.io/tls-acme: "true"
{{- else}}
  annotations: {}
{{end}}
  hosts:
{{- range $hosts}}
    - host: "{{.}}"
      paths:
        - path: /
          pathType: Prefix
{{- end}}
{{- if eq .ingress.protocol "https"}}
  tls:
    - hosts:
{{- range $hosts}}
        - "{{.}}"
{{- end}}
      secretName: "{{$component | formatSubdomain}}-tls"
{{end}}
{{end -}}

{{- if or .kubernetes.requests .kubernetes.limits}}
resources:
{{- if .kubernetes.requests }}
  requests:
{{- range .kubernetes.requests}}
    {{.}}
{{- end}}
{{- end}}
{{- if .kubernetes.limits }}
  limits:
{{- range .kubernetes.limits}}
    {{.}}
{{- end}}
{{- end}}
{{- end}}

strategy:
  rollingUpdate:
    maxUnavailable: 0
