#!/bin/sh -e

# echo "Creating Dex API gRPC server and client certificate"

# TEMP_DIR=$(mktemp -d || exit 2)
# trap 'rm -rf $TEMP_DIR' EXIT
# mkdir -p "$TEMP_DIR"

# subject="/C=UA/ST=Kyiv/L=Kyiv/O=EPAM Systems/OU=Agilestacks"
# passphrase=$(uuidgen | tr '[:upper:]' '[:lower:]' | tr -d -)
# days="1825"

# # Generate CA key and certificate
# echo "Generating RSA AES-256 Private Key for Root Certificate Authority"
# openssl genrsa -out "$TEMP_DIR/ca-key" -passout "pass:$passphrase" 4096

# echo "Generating Certificate for Root Certificate Authority"
# openssl req -new -x509 -key "$TEMP_DIR/ca-key" -days "$days" -out "$TEMP_DIR/ca-cert" -passin "pass:$passphrase" -subj "$subject/CN=Acme Root CA"

# # Generate Server key and certificate
# TEMP_DIR_SERVER="$TEMP_DIR/server"
# mkdir -p "$TEMP_DIR_SERVER"

# echo "Generating RSA Private Key and Certificate Sign Request for Server Certificate"

# openssl req -newkey rsa:4096 -nodes -keyout "$TEMP_DIR_SERVER/tls-key" -subj "$subject/CN=127.0.0.1" -out "$TEMP_DIR_SERVER/tls-csr"

# cat > "$TEMP_DIR_SERVER/server_cert_ext.cnf" << EOF
# basicConstraints = CA:FALSE
# nsCertType = server
# nsComment = "OpenSSL Generated Server Certificate"
# subjectKeyIdentifier = hash
# authorityKeyIdentifier = keyid,issuer:always
# keyUsage = critical, digitalSignature, keyEncipherment
# extendedKeyUsage = serverAuth
# subjectAltName = DNS:auth.localhost, IP:127.0.0.1
# EOF

# echo "Generating Certificate for Server Certificate"
# openssl x509 -req -extfile "$TEMP_DIR_SERVER/server_cert_ext.cnf" -days 365 -in "$TEMP_DIR_SERVER/tls-csr" -CA "$TEMP_DIR/ca-cert" -CAkey "$TEMP_DIR/ca-key" -CAcreateserial -out "$TEMP_DIR_SERVER/tls-cert" -passin "pass:$passphrase"

# # Generate Client key and certificate
# TEMP_DIR_CLIENT="$TEMP_DIR/client"
# mkdir -p "$TEMP_DIR_CLIENT"

# echo "Generating RSA Private Key and Certificate Sign Request for Client Certificate"
# openssl req -newkey rsa:4096 -nodes -keyout "$TEMP_DIR_CLIENT/tls-key" -subj "$subject/CN=127.0.0.1" -out "$TEMP_DIR_CLIENT/tls-csr"

# cat > "$TEMP_DIR_CLIENT/client_cert_ext.cnf" << EOF
# basicConstraints = CA:FALSE
# nsCertType = client, email
# nsComment = "OpenSSL Generated Client Certificate"
# subjectKeyIdentifier = hash
# authorityKeyIdentifier = keyid,issuer
# keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
# extendedKeyUsage = clientAuth, emailProtection
# subjectAltName = DNS:auth.localhost, IP:127.0.0.1
# EOF

# echo "Generating Certificate for Client Certificate"
# openssl x509 -req -extfile "$TEMP_DIR_CLIENT/client_cert_ext.cnf" -days 365 -in "$TEMP_DIR_CLIENT/tls-csr" -CA "$TEMP_DIR/ca-cert" -CAkey "$TEMP_DIR/ca-key" -CAcreateserial -out "$TEMP_DIR_CLIENT/tls-cert" -passin "pass:$passphrase"

# # Create kubernetes secrets
# kubectl="$(which kubectl) --context=$HUB_DOMAIN_NAME --namespace=$NAMESPACE"

# $kubectl create secret generic dex-grpc-server-secret \
#     --from-file="$TEMP_DIR/ca-cert" \
#     --from-file="$TEMP_DIR_SERVER/tls-cert" \
#     --from-file="$TEMP_DIR_SERVER/tls-key"

# $kubectl create secret generic dex-grpc-client-secret \
#     --from-file="$TEMP_DIR/ca-cert" \
#     --from-file="$TEMP_DIR_CLIENT/tls-cert" \
#     --from-file="$TEMP_DIR_CLIENT/tls-key"

# echo "Done!"
