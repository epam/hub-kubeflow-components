# see https://github.com/argoproj/argo-helm/blob/main/charts/argo-workflows/values.yaml
images:
  tag: "${argo.version}"

crds:
  install: true
  keep: true

fullnameOverride: "${hub.componentName}"

server:
  enabled: true
  baseHref: "/"
  # baseHref: "/${hub.componentName}/"
  image:
    tag: "${argo.version}"
  replicas: 1
  pdb:
    enabled: false
    # minAvailable: 1
    # maxUnavailable: 1

  ingress:
    enabled: false

  extraArgs:
  # this enables service HTTP protocol
  - "--secure=false"
  - "--auth-mode=server"
  - "--auth-mode=client"
  # - "--auth-mode=sso"

  clusterWorkflowTemplates:
    enableEditing: true
  sso:
    issuer: "${dex.issuer}"
    redirectUrl: "${argo.oidc.redirectUrl}"
    clientId:
      name: ${hub.componentName}-sso
      key: client-id
    clientSecret:
      name: ${hub.componentName}-sso
      key: client-secret
    scopes:
    - groups
    - email
    rbac:
      enabled: false

useStaticCredentials: true
artifactRepository:
  archiveLogs: false
  s3:
    accessKeySecret:
      name: ${hub.componentName}-artifacts
      key: accesskey
    secretKeySecret:
      name: ${hub.componentName}-artifacts
      key: secretkey
    insecure: true
    bucket: ${bucket.name}
    endpoint: ${bucket.host}:${bucket.port}
    region: ${bucket.region}
  
  # gcs: {}
  # bucket: <project>-argo
  # keyFormat: "{{workflow.namespace}}/{{workflow.name}}/{{pod.name}}"
  # serviceAccountKeySecret is a secret selector.
  # It references the k8s secret named 'my-gcs-credentials'.
  # This secret is expected to have have the key 'serviceAccountKey',
  # containing the base64 encoded credentials
  # to the bucket.
  #
  # If it's running on GKE and Workload Identity is used,
  # serviceAccountKeySecret is not needed.
  # serviceAccountKeySecret:
  # name: my-gcs-credentials
  # key: serviceAccountKey

workflow:
  serviceAccount:
    create: true
    annotations: {}
    name: ${argo.workflowNamespace}-workflow
  rbac:
    create: true
